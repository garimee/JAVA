package inherit_test;

public class test {

	public static void main(String[] args) {
		
		house t = new tv("LG");
		house air = new airconditional("캐리어");
		
		t.power();
		air.power();
	}
}

// 상속 - 여러 개의 클래스들을 부모 자식 관계로 연결해 주는 것
//	   - 여러 개의 클래스 중에서 부모 클래스는 하나이다
//	   - 클래스에서의 상속은 단일 상속만 가능 (부모 클랴스는 하나 뿐)
//	   - 부모 클래스의 인스턴스변수, 메서드를 자식 클래스에서 사용할 수 있다
//	   - 단 final이 붙은 메서드는 오버라이딩 안 됨
//	   - final이 붙은 클래스느느 부모 클래스가 될 수 없다
//	   - 자식 클래스의 객체를 생성하면 부모 클래스의 객체도 생성된다
//	   ㄴ (부모 클래스의 생성자 메서드도 실행된다)
//	   ㄴ (자식 클래스 생성자에서는 자식 클래스의 역할만 부모 클래스의 변수값 저장 같은 역할은 부모 클래스 생성자를 통해 이루어지도록 - 객체 지향 언어의 일반적인 규칙)

// 다형성
// - 부모 클래스로 자식 클래스의 객체를 담을 수 있는 방법
// - 객체의 메서드가 통일되어 사용할 수 있다
// - 하나의 타입으로 여러 타입을 관리할 수 있기 때문에 유지보수가 좋다
// - 객체의 재사용성이 쉬워지기 때문에 코드의 재사용성이 높아져 개발자가 편함
// - 안정성이 높다

// 다형성 조건
// - 상속 관계: 부모 자식 간 클래스 상속
// - 오버라이딩: 메서드의 이름, 반환타입, 매개변수가 모두 동일해야 한다
//			  메서드의 내용은 서로 다르게 작성해도 된다
// 		       부모 클래스의 메서드를 자식 클래스에서도 구현되어야 한다
//			 자식 클래스에서 오버라이딩 된 메서드 위에 @Override라고 명시해 주는 게 좋다
//			부모 클래스로부터 상속 받아 재구성된 메서드라고 표기해 줘야 다른 개발자도 알아보기 편하고 컴퓨터가 실행하는데 올바른 방식으로 실행시킬 수 있다

// 업캐스팅: 상위 타입으로 타입 변환
//		   자식 클래스 객체는 부모 클래스 타입으로 변환이 되어야 한다